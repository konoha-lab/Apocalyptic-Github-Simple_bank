// Code generated by sqlc. DO NOT EDIT.
// source: account.sql

package db

import (
	"context"
	"simple_bank/db/models"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts  (
    owner,
    balance,
    currency
) VALUES (
	$1, $2, $3
)RETURNING id, owner, balance, currency, created_at
`

type CreateAccountParams struct {
	Owner     	string 	`json:"owner"`
	Balance   	float64 `json:"balance"`
	Currency    string 	`json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (models.Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
  	var i models.Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts 
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, balance, currency, created_at FROM accounts 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (models.Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i models.Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

// const getAccountForUpdate = `-- name: GetAccountForUpdate :one
// SELECT id, owner, balance, currency, created_at FROM accounts
// WHERE id = $1 LIMIT 1
// FOR UPDATE
// `
const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, owner, balance, currency, created_at FROM accounts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (models.Account, error) {
    row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
    var i models.Account
    err := row.Scan(
        &i.ID,
        &i.Owner,
        &i.Balance,
        &i.Currency,
        &i.CreatedAt,
    )
    return i, err
}

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET balance = balance + $1
WHERE id = $2
RETURNING *;
`
type AddAccountBalanceParams struct {
    Amount float64 `json:"amount"`
    ID     int64 `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (models.Account, error) {
    row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.ID)
    var i models.Account
    err := row.Scan(
        &i.ID,
        &i.Owner,
        &i.Balance,
        &i.Currency,
        &i.CreatedAt,
    )
    return i, err
}

const listAccount = `-- name: ListAccount :many
SELECT id, owner, balance, currency, created_at FROM accounts 
ORDER BY owner LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit     	int 	`json:"limit"`
	Offset   	int 	`json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]models.Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.Account
	for rows.Next() {
		var i models.Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts SET
    balance = $1, 
    currency = $2
WHERE id = $3
RETURNING id, owner, balance, currency, created_at
`

type UpdateAccountParams struct {
	Balance   	float64 	`json:"balance"`
	Currency 	string 		`json:"currency"`
	ID        	int64  		`json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (models.Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.Balance, arg.Currency, arg.ID)
  	var i models.Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getRandomId = `-- name: GetRandomId :one
SELECT id FROM accounts
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetRandomId(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getRandomId)
	var id int64
	err := row.Scan(
		&id,
	)
	return id, err
}
